- URL Anatomy -> Screenshot(1)

IP address of router generally is like this 192.168.0.1 starting with 192 and the IP address for the computer then connected
to this router would be 192.168.0.19

- Try 127.0.0.1 in the browser to see what server technology it shows?

- Now if u try to put the IP such as 192.168.0.3 it will try to find a compputer on ur own network that has this address not on
the internet 

- tcpdump -> It's a powerfull cmdline packet sniffer, to analyse the packets that r going in and out of ur network 

- sudo apt-get install tcpdump // to install tcpdump
- sudo tcpdump // to execute program tcpdump, this will run untill u cancel and during that time it will show all the packets
which r coming in and out of the network
- sudo tcpdump -c 10 // this will now only capture 10 packets
in the output the 1st column is timestamp then it show out IP address, then the IP of router to which our computer is sending
out packets and the domain to which the packet ends up to. 
- sudo tcpdump -c 10 -A // this will print the actual packets in ASCII
- sudo tcpdump -c 5 -i wlo1 // this will now listen to a specific interface here it is wl01
- sudo tcpdump -xx -i wlo1 // this will print out the packets in hex and ASCII format 
- sudo tcpdump -i wlo1 port 22 // to capture packets from specific ports to run this properly connect to some server by the cmd
  ssh user_name_of_remote_server@ip_address_of_Server on another terminal(2nd) and each time u do something on 2nd terminal u
  will see the changes in terminal 1
-
- host file is present in /etc/hosts 
- cmd -> sudo nano /etc/hosts  // think of the file opened as an internal DNS lookup functionality, So when u go to app.localhost
  // the first place the computer checks for routes is this hosts file and if doesn't find an entry for a domain in the host file
  // then it goes to the router and the to DNS server, So by adding entries here we can actually overwrite the default behaviour
  // of known domains that we wants to change 
- edit file by entering as in the 1st column the IP, in 2nd host name, in 3rd enter alias
Ex-> 216.58.218.142      go.com      go //edit like this in /etc/hosts file and then in the browser enter 'go', this way u can  
create shoutcuts for ur favourite websites, but this works better for simple websites with the websites such as google which
have lots of internal routing going on it not works generally.  
- Go to network-tools.com and then type google.com to know it's IP, this IP is also usefull with tcpdump so that we can analyse
the packets and see that from were the packets r coming into our network 
  
- sudo hostnamectl set-hostname name_for_host // To change hostname then edit hosts file by cmd-> sudo nano /etc/hosts and
then change the hostname their as replace the old name with new name then cmd -> sudo service hostname restart
- hostname // to check hostname 
- in the browser enter http://hostname // to go to localhost page

- nmap is a open source network scanner, it is used to discover hosts or services on network by sending packets and analysing the
responses, most beginners only use nmap to scan a network for open ports but u can use it to discover host services, OS and even
use its extensible scripting library for vulnerability scanning 

- sudo apt-get update && sudo apt-get install nmap  // to install nmap 
- nmap -sP 192.168.50.0/24 // this is to scan a subnet here we r scanning from 192.168.50.0 to 192.168.50.254, by this we r now
looking for hosts that r up and ping able    
- nmap ip_of_machine_to_scan // it will return open ports and it return the services that belong to the open ports
- nmap ip_of_machine_1_to_scan ip_of_machine_2_to_scan // to do multiple scanning
- nmap 192.168.50.1-200  // to scan whole IP address range
- We can also provide the lists of mulitple IPs in a file and use it with nmap Steps->
	- touch targets.txt
	- echo 192.168.50.1-100 > targets.txt
	- cat targets.txt
	- nmap -iL targets.txt // to execute the lists file
- We can also exclude targets from scan such as if u don't want to scan router 
	- nmap 192.168.50.0/24 --e0xclude 192.168.50.6 // now out of whole subnet scan the IP 192.168.50.6 is excluded 
- We can also exclude a whole range of IP addresses by ->
	- nmap 192.168.50.0/24 --exclude 192.168.50.150-200 // now out of whole subnet scan the IPs between 192.168.50.150 and
	  192.168.50.200 are excluded
- This is aggressive scan be carefull with this as it more easily detectable then the previous scans, this uses a variety of scan
options which r included in a single param -A, this scan take a little longer but it give lot more information then previous scans
cmd -> nmap 192.168.50.4 -A 

- When u start working on a new network the 1st things u wants to do is to reduce the list of devices or IPs in the network into a
list that only contains devices that r interesting for further investigation 
- listscan lists each host of the network without sending any packets to the hosts themselves, it can sometimes does not work such
as if u scan 10 ip addresses and zero hosts r found	but it can also mean that it was simply blocked by the machine 
cmd -> nmap -sL 192.168.56.100-105
- No port scan, it means that u don't run a port scan after host discovery is done it only prints out the available hosts that 
responded to the discovery probs, u can also call it a ping scan basically 
cmd -> nmap -sn 192.168.50.8 // it basically only report that the host is either up or down, u can also run it against the larger
no. of IP addresses at the same time, it is good for some live reconissance
- The no ping scan skips the complete Nmap discovery process. Nmap directly starts to run to run it's default port scans (1000 most 
used) if it finds the target IP is up.
cmd -> nmap -Pn 192.168.56.8	// it will show how many ports r closed and open on the machine
cmd -> 192.168.56.100-105
- The TCP SYN scan, this scanning option sends a empty TCP packet with SYN flag attach to it, the default support 80, the SYN flag
tells the remote system that u r attempting to connect to it basically, if the port is open then the target will start the 2nd step
of 3way handshake by responding with a SYN/ACK tcp packet, This is usefull for systems which block the ICMP requests, u can also
change the default port to the port want
cmd -> nmap -PS 192.168.56.8	// this is for default port 80
cmd -> nmap -PS22 192.168.56.8	// thi is for port 22

- TCP ACK ping this is usefull for networks that blocks the ICMP and the SYN scan both, It discovers the host by responding to
non-existing TCP connections to provoke a response from the target, On finding the target up and running then it runs a default
port scan against it
cmd -> nmap -PA 192.168.56.8 // this might only work bcz we don't have firewall running behind or infront of the clients otherwise
it will not work

- UDP ping scan sends the UDP packets to get a response from the target. Most networks,firewalls that block UDP requests by default
or if they r not properly configured, if u r not logged in as root then u might need to use the sudo prefix
cmd -> sudo nmap -PU 192.168.56.8	// this will also return the MAC of the virtual NIC and the open ports on the target

- SCTP(Stream Control Trnasmission Protocol) init ping scan, it is used to discover VOIP services such as voice over IP, IP telephonig
cmd -> sudo nmap -PY 192.168.56.8 // this is usefull bcz people do not update their devicecs and hence they r more vulnerable
cmd -> sudo nmap22,80 -PY 192.168.56.8 // this is to use different ports at the same time

- ICMP echo ping 
cmd -> sudo nmap -PE 192.168.56.8 // this is same as ping, if u don't put sudo then it will run the TCP scan rather then ICMP

- ICMP timestamp ping, most systems r configured to block the ICMP but it is also possible that they could still allow for the ICMP
timestamp ping
cmd -> sudo nmap -PP 192.168.56.8

- ICMP address mask ping this also used an alternative for the firewall which is blocking ICMP requests
cmd -> sudo nmap -PM 192.168.56.8

- IP protocol ping, it allow u to send packets with specified protocols to the target, if u don't specify any specific protocol
the default protocols r ICMP, IGMP and IP 
cmd -> sudo nmap -PO 192.168.56.8	//this will show the protocols no. from 0 till to 255,this is default cmd
cmd -> sudo nmap -P01,5 192.168.56.8 // spicifiying the protocol no.'sL

- ARP ping, this is the fastest way of discoving host on the network, the ARP requests can't be blocked by host on a network, no
matter if their is firewall involved or not, but ur attacker machine has to be in the local network for this to work
cmd -> sudo nmap -PR 192.168.56.8

- traceroute ->
cmd -> sudo nmap --traceroute 192.168.56.8	

- For Reverse DNS for Resolution, normally DNS will only do the reverse DNS lookups for hosts that r online, With the -R tag, you
 can enforce this and Nmap will try to resolve DNS names of all the specified IP addresses. Be aware tho, the -R option will
 decrease your scan performance tremendously making ur scan take longer.
cmd -> sudo nmap -R 192.168.56.8 

- Disable Reverse DNS Resolution -> As mentioned in the previous Force Reverse DNS Resolution command, per default DNS resolution
 is only used against hosts that appear online. You can disable DNS resolution altogether if you do not need it. This will increase
 your scan performance and decrease your scan time tremendously.
 cmd -> nmap -n 192.168.56.8
 
- Alternative DNS Lookup Method -> While not very often used in the field, this option allows you to tell Nmap to use the host
 systems DNS server for the DNS lookup. This scan slows down your scan time even more than the normal Reverse DNS Lookup. Just
 recognize the command exists.
cmd -> nmap --system-dns 192.168.56.103

- Manually Specify DNS Servers -> The last option we look at is used to manually specify a DNS server for your Nmap scan. This could
 be used if you want to avoid that your DNS request appears in the local DNS server.
cmd -> nmap --dns-servers YourDnsServerAddress 192.168.56.10

Advanced nmap commands ->
- https://www.ceos3c.com/hacking/nmap-tutorial-series-3-advanced-nmap-commands/

Nmap Scripts (NSE) ->
- https://www.ceos3c.com/hacking/nmap-tutorial-series-4-nmap-scripts-nse/

SSH to Access the commandline of a Remote Host ->
- SSH(Secure Shell) it allows to access and control the cmd line of the remote host that has a SSH server setup
cmd -> ssh username@remote_host_name
use cmd -> exit // to close the connection

Transfr Files Between 2 computers using SFTP->
SFTP (Secure File Transfer Protocol) , FTP port 21, transfers file in clear text.
cmd -> sftp username@remote_host_name
> ls // for the listing on remote host 
> lls // for the listing on the local host
> put filename	// to upload the file from the local host to the remote host
> get filename  // to download the file from the remote host to the local host

Setup an SSH host on ur local machine ->
cmd on attacker machine -> sudo apt-get install openssh-server
cmd on attacker machine -> sudo nano /etc/ssh/ssh_config	// edit the PORT from 22 to 2212 and change the "PermitRootLogin" to 'no'
and also add the line at the end of the file as -> AllowUsers username	// this is going to restrict all other users to login via ssh
now u save the file with changes
cmd on attacker machine -> sudo systemctrl restart ssh // to restart the service
cmd on attacker machine -> ssh username@remote_host
 > ssh attacker_username@attacker_machine_host 

